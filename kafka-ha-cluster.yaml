# Kafka HA Headless Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-ha-headless
  namespace: kafka
  labels:
    app: kafka-ha
spec:
  clusterIP: None
  ports:
  - port: 9092
    name: plaintext
  - port: 9093
    name: ssl
  - port: 9999
    name: jmx
  selector:
    app: kafka-ha

---
# Kafka HA Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-ha-service
  namespace: kafka
  labels:
    app: kafka-ha
spec:
  type: ClusterIP
  ports:
  - port: 9092
    name: plaintext
  - port: 9093
    name: ssl
  - port: 9999
    name: jmx
  selector:
    app: kafka-ha

---
# Zookeeper HA Headless Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-ha-headless
  namespace: kafka
  labels:
    app: zookeeper-ha
spec:
  clusterIP: None
  ports:
  - port: 2181
    name: client
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  selector:
    app: zookeeper-ha

---
# Zookeeper HA Service
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-ha-service
  namespace: kafka
  labels:
    app: zookeeper-ha
spec:
  type: ClusterIP
  ports:
  - port: 2181
    name: client
  selector:
    app: zookeeper-ha

---
# 高可用Zookeeper集群 (3节点)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper-ha
  namespace: kafka
  labels:
    app: zookeeper-ha
spec:
  serviceName: zookeeper-ha-headless
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: zookeeper-ha
  template:
    metadata:
      labels:
        app: zookeeper-ha
    spec:
      containers:
      - name: zookeeper
        image: confluentinc/cp-zookeeper:7.4.0
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['apps.kubernetes.io/pod-index']
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_INIT_LIMIT
                    value: "10"
        - name: ZOOKEEPER_SYNC_LIMIT
          value: "5"
        - name: ZOOKEEPER_SERVERS
          value: "server.1=zookeeper-ha-0.zookeeper-ha-headless:2888:3888;server.2=zookeeper-ha-1.zookeeper-ha-headless:2888:3888;server.3=zookeeper-ha-2.zookeeper-ha-headless:2888:3888"
        - name: ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "1"
        - name: ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "3"
        command:
        - /bin/bash
        - -c
        - |
          # 等待DNS解析稳定
          sleep 15
          
          # 从Pod索引设置server ID
          SERVER_ID=$((${HOSTNAME##*-} + 1))
          echo "Setting ZOOKEEPER_SERVER_ID to: $SERVER_ID"
          export ZOOKEEPER_SERVER_ID=$SERVER_ID
          
          # 确保数据目录存在
          mkdir -p /var/lib/zookeeper/data
          echo $SERVER_ID > /var/lib/zookeeper/data/myid
          
          # 等待DNS稳定（简化版本）
          echo "Waiting for DNS to stabilize..."
          sleep 10
          
          # 启动Zookeeper
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: zookeeper-data
          mountPath: /var/lib/zookeeper
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 2181
          initialDelaySeconds: 30
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: zookeeper-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# 高可用Kafka集群 (3节点)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-ha
  namespace: kafka
  labels:
    app: kafka-ha
spec:
  serviceName: kafka-ha-headless
  replicas: 3
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: kafka-ha
  template:
    metadata:
      labels:
        app: kafka-ha
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
          name: plaintext
        - containerPort: 9093
          name: ssl
        - containerPort: 9999
          name: jmx
        env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-ha-service:2181"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "2"
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "3"
        - name: KAFKA_MIN_INSYNC_REPLICAS
          value: "2"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "false"
        - name: KAFKA_DELETE_TOPIC_ENABLE
          value: "true"
        - name: KAFKA_JMX_PORT
          value: "9999"
        - name: KAFKA_JMX_HOSTNAME
          value: "localhost"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
          value: "300000"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "3000"
        command:
        - /bin/bash
        - -c
        - |
          # 等待Zookeeper就绪
          echo "Waiting for Zookeeper..."
          until nc -z zookeeper-ha-service 2181; do
            echo "Waiting for Zookeeper to be ready..."
            sleep 5
          done
          echo "Zookeeper is ready!"
          
          # 从Pod名称提取broker ID
          BROKER_ID=${HOSTNAME##*-}
          echo "Setting KAFKA_BROKER_ID to: $BROKER_ID"
          export KAFKA_BROKER_ID=$BROKER_ID
          
          # 动态设置advertised listeners
          export KAFKA_ADVERTISED_LISTENERS="PLAINTEXT://${HOSTNAME}.kafka-ha-headless:9092"
          echo "Setting KAFKA_ADVERTISED_LISTENERS to: $KAFKA_ADVERTISED_LISTENERS"
          
          # 启动Kafka
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# Kafka HA External LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: kafka-ha-external
  namespace: kafka
  labels:
    app: kafka-ha
spec:
  type: LoadBalancer
  ports:
  - port: 9092
    targetPort: 9092
    name: plaintext
  selector:
    app: kafka-ha 