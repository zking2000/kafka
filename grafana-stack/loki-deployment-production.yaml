---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: grafana-stack
  labels:
    app: loki
    component: loki
    version: "3.1.1"
spec:
  # 生产环境副本数
  replicas: 3  # 最小3副本确保高可用
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: loki
      component: loki
  template:
    metadata:
      labels:
        app: loki
        component: loki
        version: "3.1.1"
      annotations:
        # 生产环境配置变更时重启
        config/hash: "${CONFIG_HASH}"
    spec:
      # 强制反亲和性确保Pod分散在不同节点
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - loki
            topologyKey: kubernetes.io/hostname
        # 节点亲和性 - 优先调度到标记的节点
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - monitoring
      
      # 生产环境安全上下文
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        fsGroupChangePolicy: "OnRootMismatch"
      
      containers:
      - name: loki
        image: grafana/loki:3.1.1
        imagePullPolicy: IfNotPresent
        args:
          - -config.file=/etc/loki/loki.yaml
          - -log.level=warn  # 生产环境日志级别
          - -server.path-prefix=/
          - -target=all  # 单体模式运行所有组件
        
        ports:
        - name: http-metrics
          containerPort: 3100
          protocol: TCP
        - name: grpc
          containerPort: 9095
          protocol: TCP
        
        # 生产环境资源配置
        resources:
          requests:
            cpu: 2000m      # 增加CPU请求
            memory: 4Gi     # 增加内存请求
          limits:
            cpu: 4000m      # 增加CPU限制
            memory: 8Gi     # 增加内存限制
        
        # 生产环境健康检查
        livenessProbe:
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 60    # 增加初始延迟
          periodSeconds: 30          # 增加检查间隔
          timeoutSeconds: 5          # 增加超时
          successThreshold: 1
          failureThreshold: 5        # 增加失败阈值
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # 启动探针 - 生产环境必需
        startupProbe:
          httpGet:
            path: /ready
            port: http-metrics
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30  # 给足时间启动
        
        # 环境变量
        env:
        - name: GOGC
          value: "100"  # Go GC优化
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
        
        # 挂载配置
        volumeMounts:
        - name: config
          mountPath: /etc/loki
          readOnly: true
        - name: runtime-config
          mountPath: /etc/loki/runtime-config
          readOnly: true
        - name: storage
          mountPath: /loki
        - name: wal
          mountPath: /loki/wal
        
        # 生产环境安全上下文
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
      
      # 使用Workload Identity的ServiceAccount
      serviceAccountName: loki-gcs
      
      # 生产环境优雅关闭配置
      terminationGracePeriodSeconds: 4800  # 80分钟
      
      # DNS配置优化
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # 优先级类（需要预先创建）
      # priorityClassName: high-priority
      
      # 容忍度配置（如果有污点节点）
      tolerations:
      - key: "monitoring"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # 卷配置
      volumes:
      - name: config
        configMap:
          name: loki-config
          defaultMode: 0644
      - name: runtime-config
        configMap:
          name: loki-runtime-config
          defaultMode: 0644
      - name: storage
        persistentVolumeClaim:
          claimName: loki-storage-pvc  # 使用PVC而不是emptyDir
      - name: wal
        persistentVolumeClaim:
          claimName: loki-wal-pvc      # WAL也使用PVC

---
# 生产环境存储类
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast-ssd
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd
  replication-type: regional-pd
allowVolumeExpansion: true
reclaimPolicy: Retain

---
# 存储PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-storage-pvc
  namespace: grafana-stack
  labels:
    app: loki
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi  # 生产环境存储大小

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-wal-pvc
  namespace: grafana-stack
  labels:
    app: loki
    component: wal
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 20Gi  # WAL存储大小

---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: grafana-stack
  labels:
    app: loki
    component: loki
  annotations:
    # 生产环境服务注解
    service.kubernetes.io/load-balancer-class: "gce"
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 3100
    protocol: TCP
    targetPort: http-metrics
  - name: grpc
    port: 9095
    protocol: TCP
    targetPort: grpc
  selector:
    app: loki
    component: loki

---
apiVersion: v1
kind: Service
metadata:
  name: loki-headless
  namespace: grafana-stack
  labels:
    app: loki
    component: loki
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: http-metrics
    port: 3100
    protocol: TCP
    targetPort: http-metrics
  - name: grpc
    port: 9095
    protocol: TCP
    targetPort: grpc
  selector:
    app: loki
    component: loki 