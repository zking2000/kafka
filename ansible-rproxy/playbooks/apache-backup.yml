---
- name: Apache配置文件备份 (本地执行版)
  hosts: rproxy
  gather_facts: yes
  become: yes
  
  vars:
    # 本地执行的变量定义
    timestamp: "{{ ansible_date_time.epoch }}"
    zip_filename: "apache-conf-{{ inventory_hostname }}-{{ timestamp }}.zip"
    # 本地下载路径
    local_backup_dir: "./backups"
    local_zip_path: "{{ local_backup_dir }}/{{ zip_filename }}"
    local_extract_path: "{{ local_backup_dir }}/extracted/{{ inventory_hostname }}"
    
  pre_tasks:
    - name: 验证必要变量是否已定义
      assert:
        that:
          - backup_dir is defined
        fail_msg: "必要的变量未定义，请在inventory中配置: backup_dir"

    - name: 显示任务开始信息
      debug:
        msg: |
          🚀 开始Apache配置备份任务
          - 目标主机: {{ inventory_hostname }} ({{ ansible_host }})
          - 备份目录: {{ backup_dir }}
          - 本地备份目录: {{ local_backup_dir }}
          - 目标分支: {{ github_branch | default('main') }}

    - name: 确保本地备份目录存在
      file:
        path: "{{ local_backup_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

  tasks:
    - name: 检查远程httpd配置目录
      stat:
        path: /etc/httpd/conf
      register: httpd_conf_dir
      tags: ['validation']

    - name: 验证Apache配置目录存在
      assert:
        that:
          - httpd_conf_dir.stat.exists
          - httpd_conf_dir.stat.isdir
        fail_msg: "Apache httpd配置目录 /etc/httpd/conf 不存在或不是目录"
      tags: ['validation']

    - name: 检查SELinux状态（如果存在）
      command: getenforce
      register: selinux_status
      failed_when: false
      changed_when: false
      tags: ['system-info']

    - name: 显示系统信息
      debug:
        msg: |
          📊 系统信息:
          - OS: {{ ansible_os_family }} {{ ansible_distribution_version }}
          - SELinux: {{ selinux_status.stdout | default('未启用') }}
          - Python: {{ ansible_python_version }}
      tags: ['system-info']

    - name: 确保远程备份目录存在
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      tags: ['preparation']

    - name: 安装必要的软件包
      package:
        name: 
          - zip
          - unzip
        state: present
      tags: ['preparation']

    - name: 检查磁盘空间
      shell: df -h {{ backup_dir }} | tail -1 | awk '{print $4}'
      register: available_space
      changed_when: false
      tags: ['validation']

    - name: 显示可用磁盘空间
      debug:
        msg: "📁 备份目录可用空间: {{ available_space.stdout }}"
      tags: ['validation']

    - name: 创建Apache配置文件的zip包
      archive:
        path: /etc/httpd/conf
        dest: "{{ backup_dir }}/{{ zip_filename }}"
        format: zip
        mode: '0644'
        owner: root
        group: root
      register: zip_result
      tags: ['backup']

    - name: 验证zip文件创建成功
      stat:
        path: "{{ backup_dir }}/{{ zip_filename }}"
      register: zip_file_stat
      tags: ['validation']

    - name: 确保zip文件创建成功
      assert:
        that:
          - zip_file_stat.stat.exists
          - zip_file_stat.stat.size > 0
        fail_msg: "ZIP文件创建失败或文件为空: {{ backup_dir }}/{{ zip_filename }}"
      tags: ['validation']

    - name: 显示zip文件信息
      debug:
        msg: |
          📦 备份文件信息:
          - 文件路径: {{ backup_dir }}/{{ zip_filename }}
          - 文件大小: {{ zip_file_stat.stat.size }} bytes
          - 创建时间: {{ zip_file_stat.stat.mtime }}
      tags: ['backup']

    - name: 下载zip文件到本地
      fetch:
        src: "{{ backup_dir }}/{{ zip_filename }}"
        dest: "{{ local_zip_path }}"
        flat: yes
        validate_checksum: yes
      register: fetch_result
      tags: ['download']

    - name: 验证文件下载成功
      stat:
        path: "{{ local_zip_path }}"
      register: local_zip_stat
      delegate_to: localhost
      tags: ['validation']

    - name: 确保本地文件下载成功
      assert:
        that:
          - local_zip_stat.stat.exists
          - local_zip_stat.stat.size > 0
        fail_msg: "本地ZIP文件下载失败: {{ local_zip_path }}"
      delegate_to: localhost
      tags: ['validation']

    - name: 清理远程临时文件
      file:
        path: "{{ backup_dir }}/{{ zip_filename }}"
        state: absent
      tags: ['cleanup']

    - name: 确保本地解压目录存在
      file:
        path: "{{ local_extract_path }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      tags: ['preparation']

    - name: 解压zip文件到本地目录
      unarchive:
        src: "{{ local_zip_path }}"
        dest: "{{ local_extract_path }}"
        remote_src: no
      delegate_to: localhost
      tags: ['extract']

    - name: 验证解压成功
      find:
        paths: "{{ local_extract_path }}"
        recurse: yes
      register: extracted_files
      delegate_to: localhost
      tags: ['validation']

    - name: 确保解压成功
      assert:
        that:
          - extracted_files.matched > 0
        fail_msg: "文件解压失败，没有找到解压的文件"
      delegate_to: localhost
      tags: ['validation']

    - name: 显示解压信息
      debug:
        msg: |
          📂 解压信息:
          - 解压路径: {{ local_extract_path }}
          - 文件数量: {{ extracted_files.matched }}
      delegate_to: localhost
      tags: ['extract']

  post_tasks:
    - name: 创建备份元数据
      copy:
        content: |
          # Apache配置备份元数据
          备份时间: {{ ansible_date_time.iso8601 }}
          源主机: {{ inventory_hostname }}
          源IP: {{ ansible_host }}
          备份用户: {{ ansible_user }}
          系统信息: {{ ansible_os_family }} {{ ansible_distribution_version }}
          备份文件: {{ zip_filename }}
          文件大小: {{ zip_file_stat.stat.size }} bytes
          Ansible版本: {{ ansible_version.full }}
          执行方式: 本地执行
        dest: "{{ local_extract_path }}/backup_metadata.txt"
      delegate_to: localhost
      tags: ['metadata']

    - name: 显示任务完成信息
      debug:
        msg: |
          ✅ 备份任务完成！
          📋 摘要信息:
          - 主机: {{ inventory_hostname }} ({{ ansible_host }})
          - 备份文件: {{ zip_filename }}
          - 本地路径: {{ local_extract_path }}
          - GitHub分支: {{ github_branch | default('main') }}
          - 备份时间: {{ ansible_date_time.iso8601 }}
          - 文件数量: {{ extracted_files.matched }}
          
          📁 备份文件位置:
          - ZIP文件: {{ local_zip_path }}
          - 解压目录: {{ local_extract_path }}

    - name: 保留本地zip文件以供后续使用
      debug:
        msg: "💾 ZIP文件已保存在: {{ local_zip_path }}"

  handlers:
    - name: 清理远程临时文件
      file:
        path: "{{ backup_dir }}/{{ zip_filename }}"
        state: absent
      listen: "cleanup on failure"
      ignore_errors: yes 